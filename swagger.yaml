openapi: 3.0.3
info:
  title: TaskMate VanillaFlow Telegram Bot API
  description: |
    API documentation for the TaskMate VanillaFlow Telegram Bot application.

    This API provides endpoints for user management, authentication, and expense request handling.

    ## Authentication

    Most endpoints require authentication using Laravel Sanctum tokens. To authenticate, include the Authorization header with your Bearer token:

    ```
    Authorization: Bearer YOUR_ACCESS_TOKEN
    ```

    ## Error Responses

    The API uses standard HTTP status codes to indicate the success or failure of requests. Error responses follow this format:

    ```json
    {
      "success": false,
      "message": "Error description"
    }
    ```

    For validation errors (422):
    ```json
    {
      "success": false,
      "message": "Validation failed",
      "errors": {
        "field_name": ["Error message"]
      }
    }
    ```
  version: 1.0.0
  contact:
    name: API Support
    email: support@taskmate.com

servers:
  - url: http://localhost:8000/api
    description: Local development server
  - url: https://yourdomain.com/api
    description: Production server

paths:
  /v1/session:
    post:
      summary: Open a user session (login)
      description: Authenticate a user and create a new session token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - login
                - password
              properties:
                login:
                  type: string
                  minLength: 4
                  maxLength: 255
                  description: User login/username
                password:
                  type: string
                  minLength: 6
                  maxLength: 255
                  description: User password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Authentication token for subsequent requests
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Неверные данные"
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      summary: Close user session (logout)
      description: Terminate the current user session
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful logout
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Сессия завершена"
  /v1/register:
    post:
      summary: Register a new user
      description: Create a new user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - login
                - password
              properties:
                login:
                  type: string
                  minLength: 4
                  maxLength: 255
                  description: User login/username (must be unique)
                password:
                  type: string
                  minLength: 12
                  maxLength: 255
                  description: User password (must contain uppercase, lowercase, number, and special character)
      responses:
        '200':
          description: Successful registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Пользователь успешно зарегистрирован"
                  token:
                    type: string
                    description: Authentication token for the new user
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /v1/up:
    get:
      summary: Check API health
      description: Verify that the API is operational
      tags:
        - Health
      responses:
        '200':
          description: API is operational
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
  /v1/users:
    get:
      summary: Get list of users
      description: Retrieve a paginated list of users with optional phone number filtering
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: per_page
          in: query
          description: Number of users per page (1-100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 15
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: phone
          in: query
          description: Filter users by phone number (partial match)
          required: false
          schema:
            type: string
            maxLength: 50
      responses:
        '200':
          description: Successful response with paginated users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/users/{id}:
    get:
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response with user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Пользователь не найден"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/users/{id}/status:
    get:
      summary: Get user status
      description: Check if a user is active by their ID
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response with user status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      is_active:
                        type: boolean
                        description: True if user exists, false otherwise
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/companies/{companyId}/expenses/approved:
    get:
      summary: Get approved expense requests
      description: Retrieve a paginated list of approved expense requests for a specific company
      tags:
        - Expenses
      security:
        - bearerAuth: []
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: integer
        - name: per_page
          in: query
          description: Number of expenses per page (1-100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 15
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        '200':
          description: Successful response with paginated approved expenses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovedExpenseListResponse'
        '400':
          description: Invalid company ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid company ID provided"
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/companies/{companyId}/expenses/declined:
    get:
      summary: Get declined expense requests
      description: Retrieve a paginated list of declined expense requests for a specific company
      tags:
        - Expenses
      security:
        - bearerAuth: []
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: integer
        - name: per_page
          in: query
          description: Number of expenses per page (1-100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 15
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        '200':
          description: Successful response with paginated declined expenses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeclinedExpenseListResponse'
        '400':
          description: Invalid company ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid company ID provided"
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/companies/{companyId}/expenses/issued:
    get:
      summary: Get issued expense requests
      description: Retrieve a paginated list of issued expense requests for a specific company
      tags:
        - Expenses
      security:
        - bearerAuth: []
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: integer
        - name: per_page
          in: query
          description: Number of expenses per page (1-100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 15
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        '200':
          description: Successful response with paginated issued expenses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuedExpenseListResponse'
        '400':
          description: Invalid company ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid company ID provided"
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/companies/{companyId}/expenses/pending:
    get:
      summary: Get pending expense requests
      description: Retrieve a paginated list of pending expense requests for a specific company
      tags:
        - Expenses
      security:
        - bearerAuth: []
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: integer
        - name: per_page
          in: query
          description: Number of expenses per page (1-100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 15
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        '200':
          description: Successful response with paginated pending expenses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingExpenseListResponse'
        '400':
          description: Invalid company ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid company ID provided"
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        login:
          type: string
        full_name:
          type: string
          nullable: true
        role:
          type: string
          enum: [user, cashier, director]
        telegram_id:
          type: integer
          nullable: true
        phone_number:
          type: string
          nullable: true
        company_id:
          type: integer
          nullable: true
    ExpenseRequestBase:
      type: object
      properties:
        id:
          type: integer
        date:
          type: string
          format: date-time
        requester_name:
          type: string
        description:
          type: string
        amount:
          type: number
          format: float
    ApprovedExpense:
      allOf:
        - $ref: '#/components/schemas/ExpenseRequestBase'
        - type: object
          properties:
            status:
              type: string
              enum: [approved, issued]
    DeclinedExpense:
      allOf:
        - $ref: '#/components/schemas/ExpenseRequestBase'
    IssuedExpense:
      allOf:
        - $ref: '#/components/schemas/ExpenseRequestBase'
        - type: object
          properties:
            issuer_name:
              type: string
            issued_amount:
              type: number
              format: float
    PendingExpense:
      allOf:
        - $ref: '#/components/schemas/ExpenseRequestBase'
        - type: object
          properties:
            status:
              type: string
              enum: [pending]
    Pagination:
      type: object
      properties:
        current_page:
          type: integer
        last_page:
          type: integer
        per_page:
          type: integer
        total:
          type: integer
        from:
          type: integer
          nullable: true
        to:
          type: integer
          nullable: true
    UserListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pagination:
          $ref: '#/components/schemas/Pagination'
    UserResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/User'
    ApprovedExpenseListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/ApprovedExpense'
        pagination:
          $ref: '#/components/schemas/Pagination'
    DeclinedExpenseListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/DeclinedExpense'
        pagination:
          $ref: '#/components/schemas/Pagination'
    IssuedExpenseListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/IssuedExpense'
        pagination:
          $ref: '#/components/schemas/Pagination'
    PendingExpenseListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/PendingExpense'
        pagination:
          $ref: '#/components/schemas/Pagination'
    ValidationError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Validation failed"
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "An error occurred"
        error:
          type: string
          example: "Error details (in debug mode)"
